/* -*- mode: c++; coding: utf-8 -*- */
namespace Feel {
    /** \page Building Building Feel++
\author Christophe Prud'homme
\author Baptiste Morin

\tableofcontents

<hr>

\section Archive Getting the source via an archive
\feel is distributed as a tarball once in a while. The tarballs are available
at<br>
<center><a href="http://code.google.com/p/feelpp/">http://code.google.com/p/feelpp/</a></center><br>
Download the latest tarball.
\verbatim
  tar -xzf feelpp-0.92.0.tar.gz
  cd feel-0.92.0
\endverbatim

<a href="#" class="top">top</a>
<hr>
\section Git Getting the source via Git
In order to download the sources of \feel, you can download it directly from the source depository thanks to Git. To make it possible, you can download them anonymously or with an account in Github that you have created. As an open-source project, we strongly suggest you to create an account and take part of the project with sharing your ideas, developments or suggests. For now, if you want to get the sources without an account, open a command-line and type
\verbatim
  git clone https://github.com/feelpp/feelpp.git
\endverbatim
then you can go to the \feel top directory with
\verbatim
  cd feel
\endverbatim
You should obtain furthers directories such as :
\verbatim
applications/   # functional applications
benchmarks/  # applications under test
cmake/   # do not touch, used for compilation
contrib/
doc/   # tutorial and examples
feel/   # Feel++ library
ports/   # used for Mac OS X installation
research/   # research projects using Feel++
testsuite/ # Feel++ unit tests testsuite
CMakeListe.txt   # the file for cmake to build, do not modify
...
\endverbatim

<a href="#" class="top">top</a>
<hr>
\section Unis Unix : dependencies
In order to install \feel on Unix systems (other than Mac OS X, in you have a Macintosh, please go to \ref Mac), you have to install many dependencies
before. Those libraries and programs are necessary for the
compilation and installation of the \feel librairies.<br>
This is the list of all the librairies you must have installed on your
computer, and the \lstinline|*-dev| packages for some of them. <br>
Required packages :
\li g++ (4.4, 4.5, 4.6, 4.7 or higher) OR Clang (3.1 or later)
\li MPI : openmpi (preferred) or mpich
\li Boost (1.39 or later)
\li Petsc (2.3.3 or later)
\li Cmake (2.6 or later)
\li Gmsh (can be found at <a href="http://www.geuz.org/gmsh">http://www.geuz.org/gmsh</a>)
\li Libxml2

Optional packages :
\li Superlu
\li Suitesparse(umfpack)
\li Metis: scoth with the metis interface (preferred), metis (non-free)
\li Trilinos (8.0.8 or later)
\li Google perftools
\li Paraview, this is not stricly required to run \feel programs but it is somehow
  necessary for visualisation. (can be found at <a href="http://www.paraview.org">http://www.paraview.org</a>)
\li Python (2.5 or later) for the validation tools

Note that all these packages are available under Debian/GNU/Linux and
Ubuntu. They should be available. Once you have installed those dependencies, you can jump to \ref Compiling.

<a href="#" class="top">top</a>
<hr>
\section DebianUbuntu Feel++ on Debian and Ubuntu
\subsection Debian Debian
Debian is the platform of choice for \feel, it was developed mainly on it. The commands to install \feel on Debian are
\verbatim
  sudo apt-get update
  sudo apt-get install feel++-apps libfeel++-dev feel++-doc
\endverbatim

The interested user is encourage to follow the \feel PTS page
\li Feel++ <a href="http://packages.qa.debian.org/f/feel%2B%2B.html">Debian Packages Tracking System</a>

At the moment \feel compiles and is available on the following Debian
plateforms:
\li Feel++ <a href="https://buildd.debian.org/status/package.php?p=feel%2b%2b">Buildd results</a>

\subsection Ubuntu Ubuntu
\feel was uploaded in the distribution Ubuntu-Natty (11.04) for the first
time. The commands to install \feel on Ubuntu are
\bverbatim
  sudo apt-get update
  sudo apt-get install feel++-apps libfeel-dev feel++-doc
\endverbatim
The interested user might want to follow the Ubuntu Launchpad \feel page in
order to know what is going on with \feel on Ubuntu
\li Feel++ <a href="https://launchpad.net/ubuntu/+source/feel++">Ubuntu Source
  Page for all Ubuntu versions</a>

<a href="#" class="top">top</a>
<hr>
\section Mac Feel++ on Mac OS X
\feel is also working on Mac operating systems. The way to make it work is quite different.

\subsection Compilers Compilers
In order to \feel and <tt>cmake</tt> work properly, you have to install differents compilers :
\li Gcc <br>
  The first step is to install the latest version of Xcode. If your computer is
  recent, you can install it with your DVD that came with your machine (not the
  OS DVD, but the applications one). You don't have to install the complete
  Xcode (you can uncheck iOS SDK for example, it's not necessary here and
  requiers a lot of memory). Xcode will provide your computer all basic tools to
  compile such as gcc 4.2. It's the first step, you'll see later how to easily
  install gcc 4.5 or later using MacPorts.
\li Fortran <br>
  To build the Makefiles, <tt>cmake</tt> will need a Fortran compiler. To make it works, please go to <a href="http://hpc.sourceforge.net/">SourceForge.net</a> and download <tt>gfortran-snwleo-intel-bin.tar.gz</tt> which is the fortran compiler only (from now, don't download the complete install with gcc 4.6 because Feel needs gcc 4.5 or later). To install it, go to the directory where you have downloaded the file and type in a command-line
\verbatim
  sudo tar -xvf gfortran-snwleo-intel-bin.tar -C /
\endverbatim

\subsection MacPorts MacPorts
<b>Introduction</b> : MacPorts is an open-source community projet which aims to design an easy-to-use system for compiling, installing and upgrading open-source softwares on Mac OS X operating system. It is distributed under <a href="http://opensource.org/licenses/bsd-license.php">BSD License</a> and facilitate the access to thousands of ports (softwares) without installing or compiling open-source softwares.  MacPorts provides a single software tree which includes the latest stable releases of approximately 8050 ports targeting the current Mac OS X release (10.6 or 10.5). If you want more information, please visite their <a href="http://www.macports.org/">website</a>.

<b>Installation</b> : To install the latest version of MacPorts, please go to
<a href="http://www.macports.org/install.php">Installing MacPorts</a> page and follow the instructions. The simplest way is to download the <tt>dmg</tt> disk image corresponding to your version of Mac OS X. It is recommended that you install X11 (X Window System) which is normally used to display X11 applications.<br>
If you have installed with the package installer (<tt>MacPorts-1.x.x.dmg</tt>) that means MacPorts will be installed in <tt>/opt/local</tt>. From now on we will suppose that macports has been installed in <tt>/opt/local</tt> which is the default MacPorts location. Note that from now on, all tools installed by MacPorts will be installed in <tt>/opt/local/bin</tt> or <tt>/opt/local/sbin</tt> for example (that's here you'll find gcc4.5 or later e.g <tt>/opt/local/bin/g++-mp-4.5</tt> once being installed).

<b>Key commands</b> : In your command-line, the software MacPorts is called by the command <tt>port</tt>. Here is a list of key commands for using MacPorts, if you want more informations please go to <a href="http://guide.macports.org/#using.port">MacPorts Commands</a>.
\li <tt>sudo port -v selfupdate</tt> This action should be used regularly to update the local tree with the global MacPorts ports. The option <tt>-v</tt> enables verbose which generates verbose messages.
\li <tt>port info flowd</tt> This action is used to get information about a port (description, license, maintainer, etc.)
\li <tt>sudo port install mypackage</tt> This action install the port mypackage
\li <tt>sudo port uninstall mypackage</tt> This action uninstall the port mypackage
\li <tt>port installed</tt> This action displays all ports installed and their versions, variants and activation status. You can also use the <tt>-v</tt> option to also display the platform and CPU architecture(s) for which the ports were built, and any variants which were explicitly negated.
\li <tt>sudo port upgrade mypackage</tt> This action updgrades installed ports and their dependencies when a <tt>Portfile</tt> in the repository has been updated. To avoid the upgrade of a port's dependencies, use the option <tt>-n</tt>.

<b>Portfile</b> : A Portfile is a TCL script which usually contains simple keyword values and TCL expressions. Each package/port has a corresponding Portfile but it's only a part of a port description.  \feel provides some mandatory Portfiles for its compilation which are either not available in MacPorts or are buggy but \feel also provides some Portfiles which are already available in MacPorts such as
gmsh or petsc. They usually provide either some fixes to ensure \feel works
properly or new version not yet available in MacPorts.  These Portfiles are
installed in <tt>ports/macosx/macports</tt>.


\subsection MacPortsFeel MacPorts and Feel++
To be able to install \feel, add the following line in <tt>/opt/local/etc/macports/source.conf</tt> at the top of the file before any other sources :
\verbatim
file:///<path to feel top directory>/ports/macosx/macports
\endverbatim

Once it's done, type in a command-line :
\verbatim
  cd <your path to feel top directory>/ports/macosx/macports
  portindex -f
\endverbatim

You should have an output like this :
\verbatim
Reading port index in $<$your path to feel top directory$>$/ports/macosx/macports
Adding port science/feel++
Adding port science/gmsh
Adding port science/petsc 

Total number of ports parsed:   3
Ports successfully parsed:      3
Ports failed:                   0
Up-to-date ports skipped:       0
\endverbatim

Your are now able to type
\verbatim
  sudo port install feel++
\endverbatim

It might take some time (possibly an entire day) to compile all the requirements for \feel to compile properly. If you have several cores on your MacBook Pro, iMac or MacBook we suggest that you configure macports to use all or some of them.
To do that uncomment the following line in the file  <tt>/opt/local/etc/macports/macports.conf</tt>
\verbatim
buildmakejobs	0 $\#$ all the cores
\endverbatim
At the end of the <tt>sudo port install feel++</tt>, you have all dependencies installed. To build all the Makefile, \cmake is automatically launched but can have some libraries may not be found but they are not mandatory for build Feel++, only the features related to the missing libraries will be missing.

\subsection PETsc PETSc and SLEPc on Snow Leopard and Lion
We have heard about issues with petsc and slepc with some new MacBook Pro with Snow Leopard while they are being installed with the command
\verbatim
  sudo port install feel++
\endverbatim
If it's the case, that probably means there is an issue with atlas. If atlas is already installed, you have to unsinstall it (be careful with dependencies, they also have to be uninstalled). Once it's done, you should do
\verbatim
  cd <path to feel top directory>/ports/macosx/macports
  portindex -f
\endverbatim
then type in the exact same order :
\verbatim
  sudo port uninstall slepc
  sudo port uninstall petsc
  sudo port install -d petsc
  sudo port install slepc
\endverbatim
Then add to you shell script environment (e.g. for Bash shells <tt>.bashrc</tt> or
<tt>.profile</tt> or for CSh shells <tt>.tcshrc</tt>)
\verbatim
  # Sh based shell
  export PETSC_DIR=/opt/local/lib/petsc
  export SLEPC_DIR=/opt/local/lib/petsc

  # CSh based shell
  setenv PETSC_DIR /opt/local/lib/petsc
  setenv SLEPC_DIR /opt/local/lib/petsc
\endverbatim
and type once again
\verbatim
  sudo port install feel++
\endverbatim

In that order, slepc and petsc will be installed before atlas, and feel will be properly installed.

\subsection Missing Missing ports
<tt>cmake</tt> can build Makefiles even if some packages are missing (latex2html, VTK ...). It's not necessary to install them but you can complete the installation
with MacPorts, <tt>cmake</tt> will find them by itself once they have been installed.

<a href="#" class="top">top</a>
<hr>
\section Compiling Compiling Feel++
Feel build system uses <a href="http://www.cmake.org"><tt>cmake</tt></a> as its build system. Check that \cmake is using gcc4.5 (or a higher version) or clang++ as C++ compiler (you can use the option <tt>CMAKE_CXX_COMPILER=<path>/g++-4.5</tt> where the <tt>path</tt> depends on your OS, it's probably <tt>/usr/bin</tt> or
<tt>/opt/local/bin</tt> but you can also change it with the command <tt>ccmake</tt>
and press <tt>t</tt> for advanced options).
\feel, using <tt>cmake</tt>, can be built either in source and out of source and different
build type:
\li minsizerel : minimal size release
\li release release
\li debug : debug
\li none(default)

<b>CMake Out Source Build (preferred)</b> : The best way is to have a directory (<tt>FEEL</tt> for example) in which you have :
\code
feel/
\endcode
where <tt>feel</tt> is the top directory where the source have been downloaded. Placed in <tt>FEEL</tt>, you can create the build directory <tt>feel.opt</tt> for example) and lauch cmake with :
\verbatim
  mkdir feel.opt
  cd feel.opt
  cmake <directory where the feel source are>
  # e.g cmake ../feel if feel.opt is at the same
  # directory level as feel
\endverbatim
you can customize the build type:
\verbatim
  # Choose g++ release
  cmake -CMAKE_CXX_COMPILER=/usr/bin/g++-4.5
  # Debug build type (-g...)
  cmake -D CMAKE_BUILD_TYPE=Debug
  # Release build type (-O3...)
  cmake -D CMAKE_BUILD_TYPE=Release
  ...
\endverbatim
Once Cmake has made its work, you are now able to compile the library with
\verbatim
  make
\endverbatim
<b>Important</b> : from now, all commands should be type in <tt>feel.opt</tt> or its subdirectories.

\subsection Manual Compiling the Feel++ manual
The manual is edited with LaTeX  so you need to have installed the LaTeX distribution on your computer. LaTeX is a high-quality typesetting system, it includes features designed for the production of technical and scientific documentation. There are several ways to make it work, for example you can go on <a href="http://www.tug.org/mactex/">MacTeX website</a> and follow the instructions to install the distribution. If the command <tt>make check</tt> in <tt>feel.opt/</tt> has been run before, the tutorial should be already compiled and ready. The steps are as follows to build the Feel tutorial
\verbatim
  cd feel.opt/doc/manual
  make feelpp-manual_pdf
\endverbatim
The directory <tt>doc/manual</tt> contains all examples used in the tutorial. You will see how it works in the following parts.


*/
}
